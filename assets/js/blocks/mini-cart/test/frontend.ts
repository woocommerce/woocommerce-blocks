// eslint-disable testing-library/no-dom-import
/**
 * External dependencies
 */
import { getByTestId, waitFor } from '@testing-library/dom';

/**
 * Internal dependencies
 */
import '../frontend.ts';

// This is a simplified version of the Mini-Cart DOM generated by MiniCart.php.
function getMiniCartDOM() {
	const div = document.createElement( 'div' );
	div.innerHTML = `
	<div class="wc-block-mini-cart">
		<div class="wc-block-mini-cart__amount" data-testid="amount"></div>
		<div class="wc-block-mini-cart__badge" data-testid="quantity"></div>
	</div>`;
	return div;
}

// This is a simplified version of the response of the Cart API endpoint.
const mockResponse = {
	ok: true,
	json: async () => ( {
		totals: {
			total_price: '1600',
			currency_code: 'USD',
			currency_symbol: '$',
			currency_minor_unit: 2,
			currency_decimal_separator: '.',
			currency_thousand_separator: ',',
			currency_prefix: '$',
			currency_suffix: '',
		},
		items_count: 2,
	} ),
} as Response;

describe( 'Mini-Cart frontend script', () => {
	it( 'updates the cart contents based on the API response', async () => {
		const fetchSpy = jest
			.spyOn( window, 'fetch' )
			.mockResolvedValue( mockResponse );

		const container = getMiniCartDOM();
		document.body.appendChild( container );

		window.dispatchEvent( new Event( 'load' ) );

		await waitFor( () =>
			expect( fetchSpy ).toHaveBeenCalledWith(
				'/wp-json/wc/store/v1/cart/'
			)
		);

		// Assert that we are rendering the amount.
		await waitFor( () =>
			expect( getByTestId( container, 'amount' ).textContent ).toBe(
				'$16.00'
			)
		);
		// Assert that we are rendering the quantity.
		await waitFor( () =>
			expect( getByTestId( container, 'quantity' ).textContent ).toBe(
				'2'
			)
		);
	} );
} );
