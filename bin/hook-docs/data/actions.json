{
    "$schema": "https://raw.githubusercontent.com/johnbillion/wp-hooks-generator/0.6.1/schema.json",
    "hooks": [
        {
            "name": "__experimental_woocommerce_blocks_checkout_order_processed",
            "file": "StoreApi/Routes/Checkout.php",
            "type": "action",
            "doc": {
                "description": "WooCommerce Blocks Checkout Order Processed (experimental).",
                "long_description": "This hook informs extensions that $order has completed processing and is ready for payment.\n This is similar to existing core hook woocommerce_checkout_order_processed. We're using a new action: - To keep the interface focused (only pass $order, not passing request data). - This also explicitly indicates these orders are from checkout block/StoreAPI.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "refers": "https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/3238"
                    },
                    {
                        "name": "example",
                        "content": "docs/examples/checkout-order-processed.md"
                    },
                    {
                        "name": "internal",
                        "content": "This Hook is experimental and may change or be removed."
                    },
                    {
                        "name": "param",
                        "content": "Order object.",
                        "types": [
                            "\\WC_Order"
                        ],
                        "variable": "$order"
                    }
                ],
                "long_description_html": "<p>This hook informs extensions that $order has completed processing and is ready for payment.</p> <p>This is similar to existing core hook woocommerce_checkout_order_processed. We're using a new action:</p> <ul> <li>To keep the interface focused (only pass $order, not passing request data).</li> <li>This also explicitly indicates these orders are from checkout block/StoreAPI.</li> </ul>"
            }
        },
        {
            "name": "__experimental_woocommerce_blocks_checkout_update_order_from_request",
            "file": "StoreApi/Routes/Checkout.php",
            "type": "action",
            "doc": {
                "description": "WooCommerce Blocks Checkout Update Order From Request (experimental).",
                "long_description": "This hook gives extensions the chance to update orders based on the data in the request. This can be used in conjunction with the ExtendRestAPI class to post custom data and then process it.",
                "tags": [
                    {
                        "name": "internal",
                        "content": "This Hook is experimental and may change or be removed."
                    },
                    {
                        "name": "param",
                        "content": "Order object.",
                        "types": [
                            "\\WC_Order"
                        ],
                        "variable": "$order"
                    },
                    {
                        "name": "param",
                        "content": "Full details about the request.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": "<p>This hook gives extensions the chance to update orders based on the data in the request. This can be used in conjunction with the ExtendRestAPI class to post custom data and then process it.</p>"
            }
        },
        {
            "name": "__experimental_woocommerce_blocks_checkout_update_order_meta",
            "file": "StoreApi/Routes/Checkout.php",
            "type": "action",
            "doc": {
                "description": "WooCommerce Blocks Checkout Update Order Meta (experimental).",
                "long_description": "This hook gives extensions the chance to add or update meta data on the $order.\n This is similar to existing core hook woocommerce_checkout_update_order_meta. We're using a new action: - To keep the interface focused (only pass $order, not passing request data). - This also explicitly indicates these orders are from checkout block/StoreAPI.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "refers": "https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/3686"
                    },
                    {
                        "name": "internal",
                        "content": "This Hook is experimental and may change or be removed."
                    },
                    {
                        "name": "param",
                        "content": "Order object.",
                        "types": [
                            "\\WC_Order"
                        ],
                        "variable": "$order"
                    }
                ],
                "long_description_html": "<p>This hook gives extensions the chance to add or update meta data on the $order.</p> <p>This is similar to existing core hook woocommerce_checkout_update_order_meta. We're using a new action:</p> <ul> <li>To keep the interface focused (only pass $order, not passing request data).</li> <li>This also explicitly indicates these orders are from checkout block/StoreAPI.</li> </ul>"
            }
        },
        {
            "name": "woocommerce_add_to_cart",
            "file": "StoreApi/Utilities/CartController.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_applied_coupon",
            "file": "StoreApi/Utilities/CartController.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_cart_enqueue_data",
            "file": "BlockTypes/MiniCart.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_cart_enqueue_data",
            "file": "BlockTypes/Cart.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_cart_enqueue_data",
            "file": "BlockTypes/CartI2.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_checkout_enqueue_data",
            "file": "BlockTypes/Checkout.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_enqueue_cart_block_scripts_after",
            "file": "BlockTypes/Cart.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_enqueue_cart_block_scripts_after",
            "file": "BlockTypes/CartI2.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_enqueue_cart_block_scripts_before",
            "file": "BlockTypes/Cart.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_enqueue_cart_block_scripts_before",
            "file": "BlockTypes/CartI2.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_enqueue_checkout_block_scripts_after",
            "file": "BlockTypes/Checkout.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_enqueue_checkout_block_scripts_before",
            "file": "BlockTypes/Checkout.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_loaded",
            "file": "Domain/Bootstrap.php",
            "type": "action",
            "doc": {
                "description": "Usable as a safe event hook for when the plugin has been loaded.",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_blocks_{$this->registry_identifier}_registration",
            "file": "Integrations/IntegrationRegistry.php",
            "type": "action",
            "doc": {
                "description": "Hook: integration_registration.",
                "long_description": "Runs before integrations are initialized allowing new integration to be registered for use. This should be used as the primary hook for integrations to include their scripts, styles, and other code extending the blocks.",
                "tags": [
                    {
                        "name": "param",
                        "content": "Instance of the IntegrationRegistry class which exposes the IntegrationRegistry::register() method.",
                        "types": [
                            "\\Automattic\\WooCommerce\\Blocks\\Integrations\\IntegrationRegistry"
                        ],
                        "variable": "$this"
                    }
                ],
                "long_description_html": "<p>Runs before integrations are initialized allowing new integration to be registered for use. This should be used as the primary hook for integrations to include their scripts, styles, and other code extending the blocks.</p>"
            }
        },
        {
            "name": "woocommerce_check_cart_items",
            "file": "StoreApi/Utilities/CartController.php",
            "type": "action",
            "doc": {
                "description": "Hook: woocommerce_check_cart_items",
                "long_description": "Allow 3rd parties to validate cart items. This is a legacy hook from Woo core. This filter will be deprecated because it encourages usage of wc_add_notice. For the API we need to capture notices and convert to exceptions instead.",
                "tags": [],
                "long_description_html": "<p>Allow 3rd parties to validate cart items. This is a legacy hook from Woo core. This filter will be deprecated because it encourages usage of wc_add_notice. For the API we need to capture notices and convert to exceptions instead.</p>"
            }
        },
        {
            "name": "woocommerce_created_customer",
            "file": "Domain/Services/CreateAccount.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_register_post",
            "file": "Domain/Services/CreateAccount.php",
            "type": "action",
            "doc": {
                "description": "",
                "long_description": "",
                "tags": [],
                "long_description_html": ""
            }
        },
        {
            "name": "woocommerce_rest_checkout_process_payment_with_context",
            "file": "StoreApi/Routes/Checkout.php",
            "type": "action_reference",
            "doc": {
                "description": "Process payment with context.",
                "long_description": "",
                "tags": [
                    {
                        "name": "hook",
                        "content": "woocommerce_rest_checkout_process_payment_with_context"
                    },
                    {
                        "name": "throws",
                        "content": "If there is an error taking payment, an \\Exception object can be thrown with an error message.",
                        "types": [
                            "\\Exception"
                        ]
                    },
                    {
                        "name": "param",
                        "content": "Holds context for the payment, including order ID and payment method.",
                        "types": [
                            "\\Automattic\\WooCommerce\\Blocks\\Payments\\PaymentContext"
                        ],
                        "variable": "$context"
                    },
                    {
                        "name": "param",
                        "content": "Result object for the transaction.",
                        "types": [
                            "\\Automattic\\WooCommerce\\Blocks\\Payments\\PaymentResult"
                        ],
                        "variable": "$payment_result"
                    }
                ],
                "long_description_html": ""
            }
        },
        {
            "name": "wooocommerce_store_api_validate_add_to_cart",
            "file": "StoreApi/Utilities/CartController.php",
            "type": "action",
            "doc": {
                "description": "Fire action to validate add to cart. Functions hooking into this should throw an \\Exception to prevent add to cart from occuring.",
                "long_description": "",
                "tags": [
                    {
                        "name": "param",
                        "content": "Product object being added to the cart.",
                        "types": [
                            "\\WC_Product"
                        ],
                        "variable": "$product"
                    },
                    {
                        "name": "param",
                        "content": "Add to cart request params including id, quantity, and variation attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            }
        },
        {
            "name": "wooocommerce_store_api_validate_cart_item",
            "file": "StoreApi/Utilities/CartController.php",
            "type": "action",
            "doc": {
                "description": "Fire action to validate add to cart. Functions hooking into this should throw an \\Exception to prevent add to cart from occurring.",
                "long_description": "",
                "tags": [
                    {
                        "name": "param",
                        "content": "Product object being added to the cart.",
                        "types": [
                            "\\WC_Product"
                        ],
                        "variable": "$product"
                    },
                    {
                        "name": "param",
                        "content": "Cart item array.",
                        "types": [
                            "array"
                        ],
                        "variable": "$cart_item"
                    }
                ],
                "long_description_html": ""
            }
        }
    ]
}